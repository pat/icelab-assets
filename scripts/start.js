'use strict';

process.env.NODE_ENV = 'development';

// Load environment variables from .env file. Suppress warnings using silent
// if this file is missing. dotenv will never modify any environment variables
// that have already been set.
// https://github.com/motdotla/dotenv
require('dotenv').config({ silent: true });

const fs = require('fs');
const path = require('path');
const chalk = require('chalk');
const detect = require('detect-port');
const merge = require('webpack-merge');
const WebpackDevServer = require('webpack-dev-server');
const clearConsole = require('react-dev-utils/clearConsole');
const getProcessForPort = require('react-dev-utils/getProcessForPort');
const sslocal = require('@pat/sslocal');

const paths = require('../config/paths');
let config = require('../config/webpack.config.dev');
const devServerConfig = require('../config/webpackDevServer.config');
const createWebpackCompiler = require('./utils/createWebpackCompiler');

const useYarn = fs.existsSync(paths.yarnLockFile);
const cli = useYarn ? 'yarn' : 'npm';
const isInteractive = process.stdout.isTTY;

const hasAppConfig = fs.existsSync(paths.appWebpackConfigDev);

const DEFAULT_PORT = parseInt(process.env.ASSETS_PORT, 10) || 8080;

function run(port) {
  const protocol = (
    process.env.ASSETS_HTTPS === 'true' || sslocal.isEnabled(process.env.STAGE)
   ) ? 'https' : 'http';
  const host = process.env.ASSETS_HOST || 'localhost';

  // Merge configurations using webpack-merge default smart strategy
  // https://github.com/survivejs/webpack-merge
  if (hasAppConfig) {
    config = merge.smart(config, require(paths.appWebpackConfigDev))
  }
  // Create a webpack compiler that is configured with custom messages.
  const compiler = createWebpackCompiler(
    config,
    function onReady(showInstructions, assets) {
      if (!showInstructions) {
        return;
      }
      const serverUrl = `${protocol}://${host}:${port}`
      console.log();
      console.log('The assets server is running at:');
      console.log();
      console.log(`  ${chalk.cyan(`${serverUrl}`)}`);
      console.log();
      if (assets.length > 0) {
        console.log('Building these CSS/JS files:');
        console.log();
        assets.forEach(asset => {
          console.log(`  ${chalk.cyan(`${serverUrl}${paths.publicPath}${asset}`)}`);
        });
      }
      console.log();
      console.log('Note that the development build is not optimized.');
      console.log(
        `To create a production build, use ${chalk.cyan(`${cli} run build`)}.`
      );
      console.log();
    }
  );

  // Serve webpack assets generated by the compiler over a web sever.
  const devServer = new WebpackDevServer(compiler, devServerConfig);

  // Launch WebpackDevServer.
  devServer.listen(port, err => {
    if (err) {
      return console.log(err);
    }

    if (isInteractive) {
      clearConsole();
    }
    console.log(chalk.cyan('Starting the development server...'));
    console.log();
  });
}

// We attempt to use the default port but if it is busy, we offer the user to
// run on a different port. `detect()` Promise resolves to the next free port.
detect(DEFAULT_PORT).then(port => {
  if (port === DEFAULT_PORT) {
    run(port);
    return;
  }
  console.log(
    chalk.red(`Something is already running on port ${DEFAULT_PORT}.`)
  );
});
